{"version":3,"sources":["app/features/task/taskSlice.js","app/reducers/index.js","app/store.js","app/components/TaskComponent.jsx","app/components/TaskListComponent.jsx","App.jsx","index.js"],"names":["taskSlice","createSlice","name","initialState","id","tasks","reducers","addTask","state","action","title","payload","push","isCompleted","toggleCompleteTask","map","task","editTask","removeTask","filter","removeAllTasks","actions","combineReducers","configureStore","reducer","rootReducer","TaskComponent","props","dispatch","useDispatch","useSelector","useState","isChecked","setIsChecked","isEditting","setIsEditting","onTriggerClearBtn","setOnTriggerClearBtn","newTaskTitle","setNewTaskTitle","editInputRef","useRef","useEffect","find","ele","className","style","backgroundColor","border","Dialog","aria-labelledby","open","onClose","aria-describedby","DialogTitle","DialogActions","Button","onClick","color","autoFocus","type","textDecoration","value","readOnly","ref","onChange","e","target","current","focus","TaskListComponent","mode","Fragment","Math","random","App","taskInputText","setTaskInputText","tasksListMode","setTasksListMode","addBtnRef","taskInputRef","listener","event","code","document","addEventListener","removeEventListener","controlButtonStyle","placeholder","ReactDOM","render","StrictMode","store","getElementById"],"mappings":"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","file":"static/js/main.9003ea82.chunk.js","sourcesContent":["import {createSlice} from '@reduxjs/toolkit'\n\nconst taskSlice = createSlice({\n    name: 'task',\n    initialState: {\n        id: 0,\n        tasks: []\n    },\n    reducers: {\n        addTask(state, action) {\n            let {title} = action.payload\n            state.id += 1\n            state.tasks.push({id: state.id, title: title, isCompleted: false})\n        },\n        toggleCompleteTask(state, action) {\n            let {id} = action.payload\n            state.tasks = state.tasks.map(task => {\n                if (task.id === id) {\n                    task.isCompleted = !task.isCompleted\n                }\n                return task\n            })\n        },\n        editTask(state, action) {\n            let {id, title} = action.payload\n            state.tasks = state.tasks.map(task => {\n                if (task.id === id) {\n                    task.title = title\n                }\n                return task\n            })\n        },\n        removeTask(state, action) {\n            let {id} = action.payload\n            state.tasks = state.tasks.filter(task => task.id !== id)\n        },\n        removeAllTasks(state, action) {\n            state.tasks = []\n        }\n    }\n})\n\nexport const {\n    addTask,\n    toggleCompleteTask,\n    editTask,\n    removeTask,\n    removeAllTasks\n} = taskSlice.actions\n\nexport default taskSlice.reducer","import {combineReducers} from 'redux'\nimport taskSlice from '../features/task/taskSlice'\n\nexport default combineReducers({\n    taskSlice: taskSlice\n})","import {configureStore} from '@reduxjs/toolkit'\nimport rootReducer from './reducers'\n\nexport default configureStore({\n    reducer: rootReducer\n})","import React, {useState, useEffect, useRef} from 'react'\nimport {Button, Dialog, DialogTitle, DialogActions} from '@material-ui/core'\nimport './TaskComponent.css'\nimport {editTask, removeTask, toggleCompleteTask} from '../features/task/taskSlice'\nimport {useDispatch, useSelector} from 'react-redux'\n\nconst TaskComponent = (props) => {\n    const dispatch = useDispatch()\n    const {tasks} = useSelector(state => state.taskSlice)\n    let {task} = props\n\n    const [isChecked, setIsChecked] = useState(false)\n    const [isEditting, setIsEditting] = useState(false)\n    const [onTriggerClearBtn, setOnTriggerClearBtn] = useState(false)\n    const [newTaskTitle, setNewTaskTitle] = useState(task.title)\n\n    const editInputRef = useRef(null)\n\n    useEffect(() => {\n        task = tasks.find(ele => ele.id === task.id)\n        setIsChecked(task.isCompleted)\n    }, [isChecked])\n\n    const onClickCheckBtn = () => {\n        dispatch(toggleCompleteTask({id: task.id}))\n        setIsChecked(!isChecked)\n    }\n\n    const onClickRemoveBtn = () => {\n        setOnTriggerClearBtn(true)\n    }\n\n    const onClickEditBtn = () => {\n        if (!isEditting) {\n            editInputRef.current.focus()\n            return setIsEditting(true)\n        } else {\n            dispatch(editTask({id: task.id, title: newTaskTitle}))\n            setIsEditting(false)\n        }\n    }\n\n    return (\n        <div\n            className='task'\n            style={isChecked ? {backgroundColor: '#bdc3c7', border: 'none'} : {}}\n        >\n            <Dialog\n                aria-labelledby=\"Clear?\"\n                open={onTriggerClearBtn}\n                onClose={() => {setOnTriggerClearBtn(false)}}\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"Are you sure to remove this task\"}</DialogTitle>\n                <DialogActions>\n                    <Button onClick={() => {setOnTriggerClearBtn(false)}} color=\"secondary\">\n                        Disagree\n                    </Button>\n                    <Button onClick={() => {\n                        dispatch(removeTask({id: task.id}))\n                        setOnTriggerClearBtn(false)\n                    }}\n                        color=\"primary\" autoFocus>\n                        Agree\n                    </Button>\n                </DialogActions>\n            </Dialog >\n            <input\n                type='text'\n                className='task-text'\n                style={isChecked ? {textDecoration: 'line-through'} : {textDecoration: 'none'}}\n                value={newTaskTitle}\n                readOnly={!isEditting}\n                ref={editInputRef}\n                onChange={(e) => {setNewTaskTitle(e.target.value)}}\n            />\n            <div className='task-btn-view'>\n                <button\n                    className='btn task-btn edit-btn'\n                    onClick={onClickEditBtn}\n                >\n                    {\n                        isEditting ? <i className='far fa-save'></i> : <i className='far fa-edit'></i>\n                    }\n                </button>\n\n                <button\n                    className='btn task-btn remove-btn'\n                    onClick={onClickRemoveBtn}\n                >\n                    <i className='fas fa-times'></i>\n                </button>\n\n                <button\n                    className='btn task-btn check-btn'\n                    onClick={onClickCheckBtn}\n                >\n                    {isChecked && <i className='fas fa-check'></i>}\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default TaskComponent","import React from 'react'\nimport TaskComponent from './TaskComponent'\nimport {useSelector} from 'react-redux'\n\nconst TaskListComponent = (props) => {\n    const {tasks} = useSelector(state => state.taskSlice)\n    const {mode} = props\n\n    return (\n        <React.Fragment>\n            {\n                tasks.map(task => {\n                    switch (mode) {\n                        case 'ALL':\n                            return (\n                                <TaskComponent\n                                    key={task.id + Math.random()}\n                                    task={task}\n                                />\n                            )\n                        case 'PENDING':\n                            return !task.isCompleted && (\n                                <TaskComponent\n                                    key={task.id + Math.random()}\n                                    task={task}\n                                />\n                            )\n                        case 'COMPLETED':\n                            return task.isCompleted && (\n                                <TaskComponent\n                                    key={task.id + Math.random()}\n                                    task={task}\n                                />\n                            )\n                        default:\n                            return (\n                                <TaskComponent\n                                    key={task.id + Math.random()}\n                                    task={task}\n                                />\n                            )\n                    }\n                })\n            }\n        </React.Fragment>\n    )\n}\n\nexport default TaskListComponent","import React, {useState, useEffect, useRef} from 'react'\nimport './App.css'\nimport {Button, Dialog, DialogTitle, DialogActions} from '@material-ui/core'\nimport TaskListComponent from './app/components/TaskListComponent'\nimport {addTask, removeAllTasks} from './app/features/task/taskSlice'\nimport {useDispatch} from 'react-redux'\n\nconst App = () => {\n    const dispatch = useDispatch()\n\n    const [taskInputText, setTaskInputText] = useState('')\n    const [tasksListMode, setTasksListMode] = useState('ALL')\n    const [onTriggerClearBtn, setOnTriggerClearBtn] = useState(false)\n\n    const addBtnRef = useRef(null)\n    const taskInputRef = useRef(null)\n\n    useEffect(() => {\n        const listener = event => {\n            if (event.code === 'Enter' || event.code === 'NumpadEnter') {\n                addBtnRef.current.focus()\n            }\n        }\n\n        taskInputRef.current.focus()\n\n        document.addEventListener('keydown', listener);\n        return () => {\n            document.removeEventListener('keydown', listener);\n        }\n    }, [])\n\n    // function to change style for control button\n    const controlButtonStyle = (name) => {\n        let isRightMode = (name === tasksListMode)\n        return isRightMode ?\n            {\n                backgroundColor: '#ecf0f1',\n                color: '#2c3e50'\n            } : {\n                backgroundColor: '#27ae60',\n                color: '#ecf0f1'\n            }\n    }\n\n    const onClickAddButton = () => {\n        taskInputText && dispatch(addTask({title: taskInputText}))\n    }\n\n    return (\n        <div className='container'>\n            <Dialog\n                aria-labelledby=\"Clear?\"\n                open={onTriggerClearBtn}\n                onClose={() => {setOnTriggerClearBtn(false)}}\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"Are you sure to remove all tasks?\"}</DialogTitle>\n                <DialogActions>\n                    <Button onClick={() => {setOnTriggerClearBtn(false)}} color=\"secondary\">\n                        Disagree\n                    </Button>\n                    <Button onClick={() => {\n                        dispatch(removeAllTasks())\n                        setOnTriggerClearBtn(false)\n                    }}\n                        color=\"primary\" autoFocus>\n                        Agree\n                    </Button>\n                </DialogActions>\n            </Dialog >\n            <div className='header'>\n                <h1 className='header-text'>EASY TODO LIST</h1>\n            </div>\n            <div className='main'>\n                <div className='top'>\n                    <input\n                        type='text'\n                        className='input'\n                        placeholder='new task'\n                        value={taskInputText}\n                        ref={taskInputRef}\n                        onChange={(e) => {setTaskInputText(e.target.value)}}\n                    />\n                    <button\n                        className='btn add-btn'\n                        onClick={onClickAddButton}\n                        ref={addBtnRef}\n                    >\n                        ADD\n                    </button>\n                </div>\n                <div className='control-view'>\n\n                    <button\n                        className='btn control-btn all-btn'\n                        onClick={() => {setTasksListMode('ALL')}}\n                        style={controlButtonStyle('ALL')}\n                    >\n                        ALL\n                    </button>\n\n                    <button\n                        className='btn control-btn pending-btn'\n                        onClick={() => {setTasksListMode('PENDING')}}\n                        style={controlButtonStyle('PENDING')}\n                    >\n                        PENDING\n                    </button>\n\n                    <button\n                        className='btn control-btn complete-btn'\n                        onClick={() => {setTasksListMode('COMPLETED')}}\n                        style={controlButtonStyle('COMPLETED')}\n                    >\n                        COMPLETED\n                    </button>\n\n                    <button\n                        className='btn control-btn clear-btn'\n                        onClick={() => {setOnTriggerClearBtn(true)}}\n                    >\n                        CLEAR\n                    </button>\n                </div>\n                <div className='middle'>\n                    <TaskListComponent mode={tasksListMode} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Provider} from 'react-redux'\nimport store from '../src/app/store'\nimport App from './App'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}