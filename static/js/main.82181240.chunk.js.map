{"version":3,"sources":["app/features/task/taskSlice.js","app/reducers/index.js","app/store.js","app/components/TaskComponent.jsx","app/components/TaskListComponent.jsx","App.jsx","index.js"],"names":["taskSlice","createSlice","name","initialState","id","tasks","reducers","addTask","state","action","title","payload","push","isCompleted","toggleCompleteTask","map","task","editTask","removeTask","filter","removeAllTasks","actions","combineReducers","configureStore","reducer","rootReducer","TaskComponent","props","dispatch","useDispatch","useSelector","useState","isChecked","setIsChecked","isEditting","setIsEditting","newTaskTitle","setNewTaskTitle","editInputRef","useRef","editBtnRef","useEffect","find","ele","className","style","backgroundColor","border","type","textDecoration","value","readOnly","ref","onChange","e","target","onKeyDown","key","current","focus","onClick","TaskListComponent","mode","Fragment","Math","random","App","taskInputText","setTaskInputText","tasksListMode","setTasksListMode","addBtnRef","taskInputRef","controlButtonStyle","color","placeholder","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.82181240.chunk.js","sourcesContent":["import {createSlice} from '@reduxjs/toolkit'\n\nconst taskSlice = createSlice({\n    name: 'task',\n    initialState: {\n        id: 0,\n        tasks: []\n    },\n    reducers: {\n        addTask(state, action) {\n            let {title} = action.payload\n            state.id += 1\n            state.tasks.push({id: state.id, title: title, isCompleted: false})\n        },\n        toggleCompleteTask(state, action) {\n            let {id} = action.payload\n            state.tasks = state.tasks.map(task => {\n                if (task.id === id) {\n                    task.isCompleted = !task.isCompleted\n                }\n                return task\n            })\n        },\n        editTask(state, action) {\n            let {id, title} = action.payload\n            state.tasks = state.tasks.map(task => {\n                if (task.id === id) {\n                    task.title = title\n                }\n                return task\n            })\n        },\n        removeTask(state, action) {\n            let {id} = action.payload\n            state.tasks = state.tasks.filter(task => task.id !== id)\n        },\n        removeAllTasks(state, action) {\n            state.tasks = []\n        }\n    }\n})\n\nexport const {\n    addTask,\n    toggleCompleteTask,\n    editTask,\n    removeTask,\n    removeAllTasks\n} = taskSlice.actions\n\nexport default taskSlice.reducer","import {combineReducers} from 'redux'\nimport taskSlice from '../features/task/taskSlice'\n\nexport default combineReducers({\n    taskSlice: taskSlice\n})","import {configureStore} from '@reduxjs/toolkit'\nimport rootReducer from './reducers'\n\nexport default configureStore({\n    reducer: rootReducer\n})","import React, {useState, useEffect, useRef} from 'react'\nimport './TaskComponent.css'\nimport {editTask, removeTask, toggleCompleteTask} from '../features/task/taskSlice'\nimport {useDispatch, useSelector} from 'react-redux'\n\nconst TaskComponent = (props) => {\n    const dispatch = useDispatch()\n    const {tasks} = useSelector(state => state.taskSlice)\n    let {task} = props\n\n    const [isChecked, setIsChecked] = useState(false)\n    const [isEditting, setIsEditting] = useState(false)\n    const [newTaskTitle, setNewTaskTitle] = useState(task.title)\n\n    const editInputRef = useRef(null)\n    const editBtnRef = useRef(null)\n\n    useEffect(() => {\n        task = tasks.find(ele => ele.id === task.id)\n        setIsChecked(task.isCompleted)\n    }, [isChecked])\n\n    const onClickCheckBtn = () => {\n        dispatch(toggleCompleteTask({id: task.id}))\n        setIsChecked(!isChecked)\n    }\n\n    const onClickRemoveBtn = () => {\n        dispatch(removeTask({id: task.id}))\n    }\n\n    const onClickEditBtn = () => {\n        if (!isEditting) {\n            editInputRef.current.focus()\n            return setIsEditting(true)\n        } else {\n            dispatch(editTask({id: task.id, title: newTaskTitle}))\n            setIsEditting(false)\n        }\n    }\n\n    return (\n        <div\n            className='task'\n            style={isChecked ? {backgroundColor: '#bdc3c7', border: 'none'} : {}}\n        >\n            <input\n                type='text'\n                className='task-text'\n                style={isChecked ? {textDecoration: 'line-through'} : {textDecoration: 'none'}}\n                value={newTaskTitle}\n                readOnly={!isEditting}\n                ref={editInputRef}\n                onChange={(e) => {setNewTaskTitle(e.target.value)}}\n                onKeyDown={e => {\n                    if (e.key === 'Enter') {\n                        editBtnRef.current.focus()\n                    }\n                }}\n            />\n            <div className='task-btn-view'>\n                <button\n                    className='btn task-btn edit-btn'\n                    ref={editBtnRef}\n                    onClick={onClickEditBtn}\n                >\n                    {\n                        isEditting ? <i className='far fa-save'></i> : <i className='far fa-edit'></i>\n                    }\n                </button>\n\n                <button\n                    className='btn task-btn remove-btn'\n                    onClick={onClickRemoveBtn}\n                >\n                    <i className='fas fa-times'></i>\n                </button>\n\n                <button\n                    className='btn task-btn check-btn'\n                    onClick={onClickCheckBtn}\n                >\n                    {isChecked && <i className='fas fa-check'></i>}\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default TaskComponent","import React from 'react'\nimport TaskComponent from './TaskComponent'\nimport {useSelector} from 'react-redux'\n\nconst TaskListComponent = (props) => {\n    const {tasks} = useSelector(state => state.taskSlice)\n    const {mode} = props\n\n    return (\n        <React.Fragment>\n            {\n                tasks.map(task => {\n                    switch (mode) {\n                        case 'ALL':\n                            return (\n                                <TaskComponent\n                                    key={task.id + Math.random()}\n                                    task={task}\n                                />\n                            )\n                        case 'PENDING':\n                            return !task.isCompleted && (\n                                <TaskComponent\n                                    key={task.id + Math.random()}\n                                    task={task}\n                                />\n                            )\n                        case 'COMPLETED':\n                            return task.isCompleted && (\n                                <TaskComponent\n                                    key={task.id + Math.random()}\n                                    task={task}\n                                />\n                            )\n                        default:\n                            return (\n                                <TaskComponent\n                                    key={task.id + Math.random()}\n                                    task={task}\n                                />\n                            )\n                    }\n                })\n            }\n        </React.Fragment>\n    )\n}\n\nexport default TaskListComponent","import React, {useState, useEffect, useRef} from 'react'\nimport './App.css'\nimport TaskListComponent from './app/components/TaskListComponent'\nimport {addTask, removeAllTasks} from './app/features/task/taskSlice'\nimport {useDispatch} from 'react-redux'\n\nconst App = () => {\n    const dispatch = useDispatch()\n\n    const [taskInputText, setTaskInputText] = useState('')\n    const [tasksListMode, setTasksListMode] = useState('ALL')\n\n    const addBtnRef = useRef(null)\n    const taskInputRef = useRef(null)\n\n    useEffect(() => {\n        taskInputRef.current.focus()\n    }, [])\n\n    // function to change style for control button\n    const controlButtonStyle = (name) => {\n        let isRightMode = (name === tasksListMode)\n        return isRightMode ?\n            {\n                backgroundColor: '#ecf0f1',\n                color: '#2c3e50'\n            } : {\n                backgroundColor: '#27ae60',\n                color: '#ecf0f1'\n            }\n    }\n\n    const onClickAddButton = () => {\n        taskInputText && dispatch(addTask({title: taskInputText}))\n    }\n\n    return (\n        <div className='container'>\n            <div className='header'>\n                <h1 className='header-text'>EASY TODO LIST</h1>\n            </div>\n            <div className='main'>\n                <div className='top'>\n                    <input\n                        type='text'\n                        className='input'\n                        placeholder='new task'\n                        value={taskInputText}\n                        ref={taskInputRef}\n                        onChange={(e) => {setTaskInputText(e.target.value)}}\n                        onKeyDown={(e) => {\n                            if (e.key === 'Enter') {\n                                addBtnRef.current.focus()\n                            }\n                        }}\n                    />\n                    <button\n                        className='btn add-btn'\n                        onClick={onClickAddButton}\n                        ref={addBtnRef}\n                    >\n                        ADD\n                    </button>\n                </div>\n                <div className='control-view'>\n\n                    <button\n                        className='btn control-btn all-btn'\n                        onClick={() => {setTasksListMode('ALL')}}\n                        style={controlButtonStyle('ALL')}\n                    >\n                        ALL\n                    </button>\n\n                    <button\n                        className='btn control-btn pending-btn'\n                        onClick={() => {setTasksListMode('PENDING')}}\n                        style={controlButtonStyle('PENDING')}\n                    >\n                        PENDING\n                    </button>\n\n                    <button\n                        className='btn control-btn complete-btn'\n                        onClick={() => {setTasksListMode('COMPLETED')}}\n                        style={controlButtonStyle('COMPLETED')}\n                    >\n                        COMPLETED\n                    </button>\n\n                    <button\n                        className='btn control-btn clear-btn'\n                        onClick={() => {dispatch(removeAllTasks())}}\n                    >\n                        CLEAR\n                    </button>\n                </div>\n                <div className='middle'>\n                    <TaskListComponent mode={tasksListMode} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Provider} from 'react-redux'\nimport store from '../src/app/store'\nimport App from './App'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}